// This is used to test the performance of the federated runtime in decentralized mode 
// (number of reactions per second).
// See [Benchmarks wiki page](https://github.com/icyphy/lingua-franca/wiki/Benchmarks).
// Correct output for this 1, 2, 3, 4.
// Failure for this test is failing to halt or getting the wrong data.
target C {
    flags: ["-O2", "-Wall", "-g", "-rdynamic"],
    coordination: decentralized,
    timeout: 4 secs
};
reactor Clock(offset:time(0), period:time(1 sec)) {
	output y:int;
	timer t(0, period);
	state count:int(0);
	reaction(t) -> y {=
		(self->count)++;
        // info_print("Reacting at time (%lld, %u).", get_elapsed_logical_time(), get_microstep());
		SET(y, self->count);
	=}
}
reactor Destination {
	input x:int;
	state s:int(1);
	reaction(x) {=
		// info_print("%d", x->value);
		// info_print("Reacting at time (%lld, %u).", get_elapsed_logical_time(), get_microstep());
		if (x->value != self->s) {
		    warning_print("Expected %d and got %d.", self->s, x->value);
		}
		self->s++;
        // info_print("Approx. time per reaction: %lldns", get_elapsed_physical_time()/(self->s+1));
	=}
    reaction(shutdown) {=
        info_print("**** shutdown reaction invoked.");
        if (self->s != 10000002) {
            warning_print("Expected 10000002 but got %d.", self->s);
        }
        info_print("Approx. time per reaction: %lldns", get_elapsed_physical_time()/(self->s+1));
    =}
}
federated reactor TimeLimitDistributedDecentralized(period:time(1 usec)) {
	c = new Clock(period = period);
	d = new Destination();
	c.y -> d.x after period;
}
