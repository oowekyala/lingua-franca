dependencies {
	implementation "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	// https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.core.runtime
    implementation group: 'org.eclipse.platform', name: 'org.eclipse.core.runtime', version: '3.22.0'
    // https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.core.resources
    implementation group: 'org.eclipse.platform', name: 'org.eclipse.core.resources', version: '3.15.0'
    // https://mvnrepository.com/artifact/org.eclipse.emf/org.eclipse.emf.mwe2.launch
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.mwe2.launch', version: '2.12.1'
}
configurations {
	mwe2 {
		extendsFrom implementation
	}
}

dependencies {
	mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/org/lflang/GenerateLinguaFranca.mwe2"
	inputs.file "src/org/lflang/LinguaFranca.xtext"
	outputs.dir "src-gen"
	args += "src/org/lflang/GenerateLinguaFranca.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."

	// Currently we don't need to delete any generated files because we use the
	// Java/Xtend implementations.  However, if we commit to porting such files
	// to Kotlin, we might to reintroduce the deletion mechanism below.
	/*doLast {
		def filesToDelete = [
				"org.lflang.validation.LFValidator",
				"org.lflang.LFRuntimeModule",
				"org.lflang.LFStandaloneSetup",
				"org.lflang.generator.LFGenerator",
				"org.lflang.scoping.LFScopeProvider"
		]

		filesToDelete.each { qname ->
			def path = qname.replace('.', '/')
			def ktFile = file("src/${path}.kt")
			def javaFile = file("src/${path}.java")
			def xtendFile = file("src/${path}.xtend")

			if (ktFile.exists() || xtendFile.exists()) {
				def chosenLang = ktFile.exists() ? "Kotlin" : "Xtend"
				project.logger.info("deleting ${projectDir.relativePath(javaFile)}, the ${chosenLang} file prevails")
				project.delete(javaFile) // generated by Xtend
			} else {
				project.logger.info("no ${projectDir.relativePath(ktFile)}, leaving the Java implementation in")
			}
		}
	}*/
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

task generateStandaloneCompiler() {
	apply plugin: 'application'
	apply plugin: 'com.github.johnrengelman.shadow'
	mainClassName = 'org.lflang.generator.Main'
	
    shadowJar {
        exclude 'test/*'
        minimize() {
            exclude(dependency('log4j:log4j:.*'))
            exclude(dependency('com.google.inject:guice:.*'))
        }
        transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer){
            resource = 'plugin.properties'
        }
    }
}

generateStandaloneCompiler.finalizedBy shadowJar

task runLfc(type: JavaExec) {
    // Note: when you use --args, you need to escape cli flags which start with --
    // For instance --args ' --help'
    // Otherwise they're parsed as arguments to the Gradle CLI, not LFC.
    description = "Build and run LFC, use --args to pass arguments"
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.lflang.generator.Main'
}
